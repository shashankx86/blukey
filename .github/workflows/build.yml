name: Build and Release

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name'
        required: true
      is_prerelease:
        description: 'Is this a prerelease?'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - i686-unknown-linux-gnu
          - mips64-unknown-linux-gnuabi64
          - powerpc-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - s390x-unknown-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y gcc

      - name: Build project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package .deb
        run: |
          cargo install cargo-deb
          cargo deb --target ${{ matrix.target }}

      - name: Package .rpm
        run: |
          cargo install cargo-rpm
          cargo rpm build --target ${{ matrix.target }}

      - name: Package .pkg
        run: |
          cargo install cargo-pkgbuild
          cargo pkgbuild --target ${{ matrix.target }}

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: my-rust-project-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: my-rust-project-${{ matrix.target }}
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          release_name: ${{ github.event.inputs.release_name }}
          prerelease: ${{ github.event.inputs.is_prerelease }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: my-rust-project-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip